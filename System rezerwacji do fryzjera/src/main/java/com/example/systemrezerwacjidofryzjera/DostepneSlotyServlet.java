package com.example.systemrezerwacjidofryzjera;

import com.google.gson.Gson;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.*;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.*;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.*;

// Serwlet udostƒôpniajƒÖcy dostƒôpne sloty (wolne godziny) do rezerwacji na najbli≈ºsze 30 dni
@WebServlet("/dostepne-sloty")
public class DostepneSlotyServlet extends HttpServlet {

    // Metoda wywo≈Çywana przy ka≈ºdym zapytaniu GET do tego serwletu (np. przez kalendarz na stronie)
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException {
        // Lista slot√≥w (godzin), kt√≥re bƒôdƒÖ zwr√≥cone jako odpowied≈∫
        List<Map<String, String>> sloty = new ArrayList<>();

        try (Connection conn = DatabaseConnection.getConnection()) {
            // Ustal dzisiejszƒÖ datƒô i datƒô za 30 dni (zakres przeszukania)
            LocalDate dzis = LocalDate.now();
            LocalDate za30dni = dzis.plusDays(30);

            // Zapytanie wybierajƒÖce wszystkie godziny pracy w wybranym zakresie dat
            String sql = "SELECT * FROM godziny_pracy WHERE data BETWEEN ? AND ?";
            try (PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setDate(1, java.sql.Date.valueOf(dzis));
                stmt.setDate(2, java.sql.Date.valueOf(za30dni));

                ResultSet rs = stmt.executeQuery();
                while (rs.next()) {
                    int godzinyPracyId = rs.getInt("id");
                    LocalDate data = rs.getDate("data").toLocalDate();
                    LocalTime start = rs.getTime("godzina_start").toLocalTime();
                    LocalTime koniec = rs.getTime("godzina_koniec").toLocalTime();

                    // Sprawdzenie ka≈ºdej pe≈Çnej godziny w podanym przedziale czasowym
                    for (LocalTime godzina = start; godzina.isBefore(koniec); godzina = godzina.plusHours(1)) {
                        // Je≈õli slot NIE jest ju≈º zajƒôty (nie ma rezerwacji), dodajemy go do listy dostƒôpnych slot√≥w
                        if (!czySlotZajety(conn, godzinyPracyId, godzina)) {
                            Map<String, String> slot = new HashMap<>();
                            slot.put("start", data + "T" + godzina);
                            slot.put("end", data + "T" + godzina.plusHours(1));
                            slot.put("slot_id", godzinyPracyId + "-" + godzina); // Np. "15-12:00"
                            sloty.add(slot);

                            // Informacja dla programisty ‚Äì slot zosta≈Ç dodany do listy dostƒôpnych
                            System.out.println("üü¢ Slot dodany: " + slot.get("start") + " | ID: " + slot.get("slot_id"));
                        }
                    }
                }
            }

            // Ustawiamy odpowiedni typ odpowiedzi (JSON) i zwracamy wszystkie dostƒôpne sloty do przeglƒÖdarki
            resp.setContentType("application/json");
            PrintWriter out = resp.getWriter();
            out.print(new Gson().toJson(sloty));
            out.flush();

        } catch (SQLException e) {
            // Obs≈Çuga b≈Çƒôd√≥w bazy danych ‚Äì wypisuje b≈ÇƒÖd w konsoli i informuje przeglƒÖdarkƒô o b≈Çƒôdzie
            e.printStackTrace();
            resp.sendError(500, "B≈ÇƒÖd bazy danych: " + e.getMessage());
        }
    }

    // Metoda sprawdzajƒÖca, czy slot (czyli konkretna godzina) nie zosta≈Ç ju≈º zarezerwowany
    private boolean czySlotZajety(Connection conn, int godzinyPracyId, LocalTime godzina) throws SQLException {
        String sql = "SELECT COUNT(*) FROM rezerwacje WHERE godziny_pracy_id = ? AND godzina_rezerwacji = ?";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setInt(1, godzinyPracyId);
            stmt.setTime(2, Time.valueOf(godzina));
            ResultSet rs = stmt.executeQuery();
            // Je≈õli liczba wynik√≥w jest wiƒôksza ni≈º 0, to slot jest ju≈º zajƒôty
            return rs.next() && rs.getInt(1) > 0;
        }
    }
}

/*
    PODSUMOWANIE DZIA≈ÅANIA:

    - Ten plik odpowiada za generowanie i zwracanie listy wszystkich dostƒôpnych do rezerwacji slot√≥w (wolnych godzin) dla klient√≥w.
    - Serwlet pobiera z bazy wszystkie godziny pracy fryzjer√≥w z najbli≈ºszych 30 dni, dzieli je na pe≈Çne godziny.
    - Ka≈ºdy slot (czyli konkretna godzina w ramach godzin pracy) jest sprawdzany pod kƒÖtem dostƒôpno≈õci:
      je≈õli nie ma jeszcze rezerwacji w tym czasie, jest dodawany do listy jako wolny termin.
    - Lista slot√≥w jest zamieniana na format JSON i zwracana do przeglƒÖdarki (np. do wy≈õwietlenia w kalendarzu na stronie).
    - Dziƒôki temu u≈ºytkownik widzi tylko naprawdƒô wolne godziny i mo≈ºe je ≈Çatwo zarezerwowaƒá przez system.
    - W przypadku b≈Çƒôd√≥w bazy danych u≈ºytkownik otrzyma komunikat o problemie.
*/
